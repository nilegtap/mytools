import SwiftUI

// --- Data Models to match the AI's JSON response ---
struct Job: Codable, Identifiable {
    let id: Int
    let title: String
    let company: String
    let location: String
    let description: String
    let skills: [String]
}

struct JobResponse: Codable {
    let jobs: [Job]
}

// --- Main ContentView ---
struct ContentView: View {
    // State for the current view
    @State private var jobQuery = ""
    @State private var locationQuery = ""
    @State private var isRemoteOnly = false
    
    // State for the job postings
    @State private var jobPostings: [Job] = []
    @State private var isLoading = false
    @State private var errorMessage: String?
    @State private var hasSearched = false

    var body: some View {
        NavigationView {
            VStack(spacing: 0) {
                // --- Search Form ---
                VStack(alignment: .leading, spacing: 16) {
                    Text("Find Your Next Opportunity")
                        .font(.largeTitle)
                        .fontWeight(.bold)
                        .foregroundColor(.primary)

                    TextField("Job Title or Keywords (e.g., Swift Developer)", text: $jobQuery)
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                        .padding(.vertical, 4)

                    TextField("Location (e.g., San Francisco)", text: $locationQuery)
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                        .disabled(isRemoteOnly)
                        .opacity(isRemoteOnly ? 0.5 : 1.0)
                        .padding(.vertical, 4)
                    
                    Toggle(isOn: $isRemoteOnly) {
                        Text("Search for remote-only positions")
                            .font(.subheadline)
                    }
                    .padding(.vertical, 4)

                    Button(action: fetchJobPostings) {
                        HStack {
                            Image(systemName: "magnifyingglass")
                            Text(isLoading ? "Searching..." : "Find Jobs")
                                .fontWeight(.semibold)
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .foregroundColor(.white)
                        .background(Color.blue)
                        .cornerRadius(10)
                    }
                    .disabled(isLoading)
                }
                .padding()
                .background(Color(.systemGray6))
                .cornerRadius(16)
                .padding()

                // --- Results List ---
                if isLoading {
                    Spacer()
                    ProgressView("Finding jobs...")
                        .scaleEffect(1.5)
                    Spacer()
                } else if let errorMessage = errorMessage {
                     VStack {
                        Image(systemName: "exclamationmark.triangle.fill")
                            .font(.largeTitle)
                            .foregroundColor(.red)
                            .padding(.bottom, 5)
                        Text(errorMessage)
                           .multilineTextAlignment(.center)
                           .padding()
                     }
                } else if hasSearched && jobPostings.isEmpty {
                    VStack {
                         Image(systemName: "doc.text.magnifyingglass")
                            .font(.largeTitle)
                            .foregroundColor(.secondary)
                            .padding(.bottom, 5)
                        Text("No Jobs Found")
                            .font(.headline)
                        Text("Try broadening your search criteria.")
                            .font(.subheadline)
                            .foregroundColor(.secondary)
                    }
                } else {
                    List(jobPostings) { job in
                        JobRowView(job: job)
                    }
                }
                
                // Footer
                Text("Created by Digital AI Sherlocks, Inc.")
                    .font(.caption)
                    .foregroundColor(.secondary)
                    .padding(.top, 8)

            }
            .navigationTitle("AI Job Finder")
            .navigationBarHidden(true)
        }
    }

    // --- Networking Function ---
    func fetchJobPostings() {
        guard !jobQuery.isEmpty else {
            errorMessage = "Please enter a job title or keywords."
            return
        }
        
        isLoading = true
        errorMessage = nil
        hasSearched = true
        self.jobPostings = []

        let locationPrompt = isRemoteOnly ? "remote only" : (locationQuery.isEmpty ? "any location" : locationQuery)
        let prompt = """
        Generate a list of 8 recent and realistic job postings for a "\(jobQuery)" in "\(locationPrompt)". For each job, provide a unique id (integer), title, company, location, a short 2-3 sentence description summarizing the role, and a list of 3-5 key skills.
        """
        
        let apiKey = "" // Leave empty, will be handled by the environment
        let urlString = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=\(apiKey)"
        
        guard let url = URL(string: urlString) else {
            self.errorMessage = "Invalid API URL"
            self.isLoading = false
            return
        }

        let requestBody: [String: Any] = [
            "contents": [
                ["role": "user", "parts": [["text": prompt]]]
            ],
            "generationConfig": [
                "responseMimeType": "application/json",
                "responseSchema": [
                    "type": "OBJECT",
                    "properties": [
                        "jobs": [
                            "type": "ARRAY",
                            "items": [
                                "type": "OBJECT",
                                "properties": [
                                    "id": ["type": "INTEGER"],
                                    "title": ["type": "STRING"],
                                    "company": ["type": "STRING"],
                                    "location": ["type": "STRING"],
                                    "description": ["type": "STRING"],
                                    "skills": ["type": "ARRAY", "items": ["type": "STRING"]]
                                ],
                                "required": ["id", "title", "company", "location", "description", "skills"]
                            ]
                        ]
                    ]
                ]
            ]
        ]
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.addValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpBody = try? JSONSerialization.data(withJSONObject: requestBody)

        URLSession.shared.dataTask(with: request) { data, response, error in
            DispatchQueue.main.async {
                self.isLoading = false
                if let error = error {
                    self.errorMessage = "Network error: \(error.localizedDescription)"
                    return
                }

                guard let data = data else {
                    self.errorMessage = "No data received from API."
                    return
                }
                
                // --- Decoding Logic ---
                do {
                    // The Gemini API response wraps the JSON in a specific structure.
                    // We need to decode that structure first to get to the actual content.
                    let preliminaryResponse = try JSONDecoder().decode(GeminiAPIResponse.self, from: data)
                    
                    guard let firstCandidate = preliminaryResponse.candidates.first,
                          let firstPart = firstCandidate.content.parts.first,
                          let jsonTextData = firstPart.text.data(using: .utf8) else {
                        self.errorMessage = "Could not parse the job data from the API response."
                        return
                    }
                    
                    // Now decode the inner JSON text which contains the job list
                    let finalResponse = try JSONDecoder().decode(JobResponse.self, from: jsonTextData)
                    self.jobPostings = finalResponse.jobs
                    
                } catch {
                    self.errorMessage = "Failed to decode job data. \(error.localizedDescription)"
                    print(String(data: data, encoding: .utf8) ?? "No printable data")
                }
            }
        }.resume()
    }
}


// --- Helper View for a single job row ---
struct JobRowView: View {
    let job: Job

    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text(job.title)
                .font(.headline)
                .foregroundColor(.blue)
            
            Text(job.company)
                .font(.subheadline)
                .fontWeight(.bold)

            HStack {
                Image(systemName: "mappin.circle.fill")
                Text(job.location)
            }
            .font(.caption)
            .foregroundColor(.secondary)
            
            Text(job.description)
                .font(.body)
                .lineLimit(3)
                .padding(.top, 4)

            // Skills View
            ScrollView(.horizontal, showsIndicators: false) {
                HStack {
                    ForEach(job.skills, id: \.self) { skill in
                        Text(skill)
                            .font(.caption)
                            .fontWeight(.medium)
                            .padding(.horizontal, 10)
                            .padding(.vertical, 5)
                            .background(Color.blue.opacity(0.1))
                            .foregroundColor(.blue)
                            .cornerRadius(12)
                    }
                }
            }
        }
        .padding(.vertical)
    }
}

// --- Helper Models for Gemini API Response Decoding ---
struct GeminiAPIResponse: Codable {
    let candidates: [Candidate]
}
struct Candidate: Codable {
    let content: Content
}
struct Content: Codable {
    let parts: [Part]
}
struct Part: Codable {
    let text: String
}


// --- Preview Provider for Xcode ---
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}

