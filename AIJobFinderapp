import React, { useState, useCallback } from 'react';
import { Briefcase, MapPin, Search, Loader, ServerCrash } from 'lucide-react';

// --- Main App Component ---
export default function App() {
  // --- State Management ---
  const [jobQuery, setJobQuery] = useState('');
  const [locationQuery, setLocationQuery] = useState('');
  const [jobPostings, setJobPostings] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [hasSearched, setHasSearched] = useState(false);

  // --- AI Job Search Function ---
  const fetchJobPostings = useCallback(async () => {
    if (!jobQuery) {
      setError('Please enter a job title or keywords.');
      return;
    }

    setIsLoading(true);
    setError(null);
    setHasSearched(true);
    setJobPostings([]);

    const prompt = `Generate a list of 8 recent and realistic job postings for a "${jobQuery}" in "${locationQuery || 'any location'}". For each job, provide a title, company, location, a short 2-3 sentence description summarizing the role and key responsibilities, and a list of 3-5 key skills.`;

    try {
       const chatHistory = [{ role: "user", parts: [{ text: prompt }] }];
       const payload = {
         contents: chatHistory,
         generationConfig: {
           responseMimeType: "application/json",
           responseSchema: {
             type: "OBJECT",
             properties: {
               "jobs": {
                 "type": "ARRAY",
                 "items": {
                   "type": "OBJECT",
                   "properties": {
                     "title": { "type": "STRING" },
                     "company": { "type": "STRING" },
                     "location": { "type": "STRING" },
                     "description": { "type": "STRING" },
                     "skills": {
                       "type": "ARRAY",
                       "items": { "type": "STRING" }
                     }
                   },
                   "required": ["title", "company", "location", "description", "skills"]
                 }
               }
             },
           }
         }
       };
       
       const apiKey = ""; 
       const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

       const response = await fetch(apiUrl, {
         method: 'POST',
         headers: { 'Content-Type': 'application/json' },
         body: JSON.stringify(payload)
       });

       if (!response.ok) {
         throw new Error(`API error: ${response.statusText}`);
       }

       const result = await response.json();

       if (result.candidates && result.candidates.length > 0 && result.candidates[0].content.parts.length > 0) {
         const jsonText = result.candidates[0].content.parts[0].text;
         const parsedJson = JSON.parse(jsonText);
         setJobPostings(parsedJson.jobs || []);
       } else {
         throw new Error("No job postings found or the response was empty.");
       }

    } catch (err) {
      console.error("Error fetching job postings:", err);
      setError("Sorry, we couldn't fetch job postings at the moment. Please try again later.");
      setJobPostings([]);
    } finally {
      setIsLoading(false);
    }
  }, [jobQuery, locationQuery]);
  
  const handleSearchClick = (e) => {
      e.preventDefault();
      fetchJobPostings();
  }

  // --- Render UI ---
  return (
    <div className="min-h-screen bg-gray-50 font-sans text-gray-800">
      <div className="container mx-auto p-4 sm:p-6 lg:p-8">
        
        {/* --- Header --- */}
        <header className="text-center mb-8">
          <h1 className="text-4xl sm:text-5xl font-bold text-blue-600 mb-2">AI Job Finder</h1>
          <p className="text-lg text-gray-600">Discover your next career opportunity with the power of AI.</p>
        </header>

        {/* --- Search Form --- */}
        <div className="max-w-2xl mx-auto mb-8">
          <form onSubmit={handleSearchClick} className="bg-white p-6 rounded-xl shadow-lg border border-gray-200">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              <div>
                <label htmlFor="job-query" className="block text-sm font-medium text-gray-700 mb-1">Job Title / Keywords</label>
                <div className="relative">
                  <Briefcase className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                  <input
                    id="job-query"
                    type="text"
                    value={jobQuery}
                    onChange={(e) => setJobQuery(e.target.value)}
                    placeholder="e.g., Software Engineer"
                    className="w-full pl-10 pr-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all"
                  />
                </div>
              </div>
              <div>
                <label htmlFor="location-query" className="block text-sm font-medium text-gray-700 mb-1">Location</label>
                <div className="relative">
                  <MapPin className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                  <input
                    id="location-query"
                    type="text"
                    value={locationQuery}
                    onChange={(e) => setLocationQuery(e.target.value)}
                    placeholder="e.g., Remote, New York"
                    className="w-full pl-10 pr-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all"
                  />
                </div>
              </div>
            </div>
            <button
              type="submit"
              disabled={isLoading}
              className="w-full bg-blue-600 text-white font-semibold py-3 px-4 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-4 focus:ring-blue-300 transition-all duration-300 flex items-center justify-center disabled:bg-blue-300 disabled:cursor-not-allowed"
            >
              {isLoading ? (
                <>
                  <Loader className="animate-spin mr-2 h-5 w-5" />
                  Searching...
                </>
              ) : (
                <>
                  <Search className="mr-2 h-5 w-5" />
                  Find Jobs
                </>
              )}
            </button>
          </form>
        </div>

        {/* --- Results Section --- */}
        <main>
          {error && <ErrorMessage message={error} />}
          
          {isLoading && (
             <div className="text-center py-10">
                <div role="status" className="inline-flex flex-col items-center">
                    <svg aria-hidden="true" className="w-12 h-12 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor"/><path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0492C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill"/></svg>
                    <span className="sr-only">Loading...</span>
                    <p className="mt-4 text-lg text-gray-600">Finding the best opportunities for you...</p>
                </div>
            </div>
          )}

          {!isLoading && hasSearched && jobPostings.length === 0 && !error && (
            <div className="text-center py-10 px-4">
              <h2 className="text-2xl font-semibold text-gray-700 mb-2">No Jobs Found</h2>
              <p className="text-gray-500">We couldn't find any jobs matching your search. Try broadening your criteria.</p>
            </div>
          )}

          {!isLoading && jobPostings.length > 0 && (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-6">
              {jobPostings.map((job, index) => (
                <JobCard key={index} job={job} />
              ))}
            </div>
          )}

        </main>
      </div>
    </div>
  );
}

// --- JobCard Component ---
const JobCard = ({ job }) => {
  return (
    <div className="bg-white rounded-xl shadow-md border border-gray-200 p-6 transition-all hover:shadow-xl hover:-translate-y-1 flex flex-col">
      <div className="flex-grow">
        <h3 className="text-xl font-bold text-blue-600 mb-1">{job.title}</h3>
        <p className="text-md font-semibold text-gray-800 mb-1">{job.company}</p>
        <div className="flex items-center text-gray-500 mb-4">
          <MapPin className="h-4 w-4 mr-1.5" />
          <span>{job.location}</span>
        </div>
        <p className="text-gray-600 text-sm mb-4">{job.description}</p>
        <h4 className="font-semibold text-gray-700 mb-2">Key Skills:</h4>
        <div className="flex flex-wrap gap-2">
          {job.skills.map((skill, i) => (
            <span key={i} className="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-1 rounded-full">
              {skill}
            </span>
          ))}
        </div>
      </div>
      <div className="mt-6 flex-shrink-0">
        <a 
          href="#" 
          onClick={(e) => e.preventDefault()}
          className="w-full block text-center bg-gray-800 text-white font-semibold py-2.5 px-4 rounded-lg hover:bg-gray-900 focus:outline-none focus:ring-4 focus:ring-gray-300 transition-all duration-300"
        >
          View & Apply
        </a>
      </div>
    </div>
  );
};

// --- ErrorMessage Component ---
const ErrorMessage = ({ message }) => {
  return (
    <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-lg mb-8 max-w-2xl mx-auto" role="alert">
      <div className="flex">
        <div className="py-1"><ServerCrash className="h-6 w-6 text-red-500 mr-4" /></div>
        <div>
          <p className="font-bold">An Error Occurred</p>
          <p className="text-sm">{message}</p>
        </div>
      </div>
    </div>
  );
};
