import React, { useState, useCallback, useEffect } from 'react';
import { Briefcase, MapPin, Search, Loader, ServerCrash, LogIn, UserPlus, Star, User, LogOut, Home } from 'lucide-react';

// --- Firebase Imports ---
// NOTE: In a real environment, you would get these from your Firebase project config.
// These are placeholders and will be populated by the environment.
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : { apiKey: "your-api-key", authDomain: "your-auth-domain", projectId: "your-project-id" };
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';

import { initializeApp } from "firebase/app";
import { 
  getAuth, 
  onAuthStateChanged, 
  createUserWithEmailAndPassword, 
  signInWithEmailAndPassword, 
  signOut,
  signInAnonymously,
  signInWithCustomToken
} from "firebase/auth";
import { 
  getFirestore, 
  doc, 
  setDoc, 
  getDoc, 
  updateDoc, 
  arrayUnion, 
  arrayRemove,
  collection
} from "firebase/firestore";

// --- Firebase Initialization ---
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);


// --- Main App Component ---
export default function App() {
  const [page, setPage] = useState('home'); // 'home', 'login', 'signup', 'profile'
  const [user, setUser] = useState(null);
  const [isAuthReady, setIsAuthReady] = useState(false);

  // --- Auth State Listener ---
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
      if (currentUser) {
        // User is signed in.
        const userDocRef = doc(db, `artifacts/${appId}/users`, currentUser.uid);
        const userDocSnap = await getDoc(userDocRef);
        if (userDocSnap.exists()) {
          setUser({ ...currentUser, ...userDocSnap.data() });
        } else {
          // Create user doc if it doesn't exist (e.g., first-time social login)
          const newUser = {
            email: currentUser.email,
            savedJobs: [],
            createdAt: new Date()
          };
          await setDoc(userDocRef, newUser);
          setUser({ ...currentUser, ...newUser });
        }
      } else {
        // User is signed out.
        setUser(null);
      }
      setIsAuthReady(true);
    });
    
    // --- Initial Sign In ---
    const initialSignIn = async () => {
        if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
            try {
                await signInWithCustomToken(auth, __initial_auth_token);
            } catch (error) {
                console.error("Custom token sign-in failed, trying anonymous.", error);
                await signInAnonymously(auth);
            }
        } else {
            await signInAnonymously(auth);
        }
    };
    initialSignIn();

    return () => unsubscribe();
  }, []);

  if (!isAuthReady) {
    return <FullScreenLoader message="Initializing App..." />;
  }

  return (
    <div className="min-h-screen bg-gray-50 font-sans text-gray-800">
      <Navbar user={user} setPage={setPage} />
      <div className="container mx-auto p-4 sm:p-6 lg:p-8">
        {page === 'home' && <JobSearchPage user={user} />}
        {page === 'login' && <LoginPage setPage={setPage} />}
        {page === 'signup' && <SignupPage setPage={setPage} />}
        {page === 'profile' && <ProfilePage user={user} setUser={setUser} />}
      </div>
    </div>
  );
}


// --- Components for Pages ---

const JobSearchPage = ({ user }) => {
  const [jobQuery, setJobQuery] = useState('');
  const [locationQuery, setLocationQuery] = useState('');
  const [isRemoteOnly, setIsRemoteOnly] = useState(false);
  const [jobPostings, setJobPostings] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [hasSearched, setHasSearched] = useState(false);

  const fetchJobPostings = useCallback(async () => {
    if (!jobQuery) {
      setError('Please enter a job title or keywords.');
      return;
    }
    setIsLoading(true);
    setError(null);
    setHasSearched(true);
    setJobPostings([]);

    const locationPrompt = isRemoteOnly ? 'remote only' : (locationQuery || 'any location');
    const prompt = `Generate a list of 8 recent and realistic job postings for a "${jobQuery}" in "${locationPrompt}". For each job, provide a unique id (integer), title, company, location, a short 2-3 sentence description summarizing the role, and a list of 3-5 key skills.`;

    try {
      const chatHistory = [{ role: "user", parts: [{ text: prompt }] }];
      const payload = {
         contents: chatHistory,
         generationConfig: {
           responseMimeType: "application/json",
           responseSchema: {
             type: "OBJECT",
             properties: {
               "jobs": {
                 "type": "ARRAY",
                 "items": {
                   "type": "OBJECT",
                   "properties": {
                     "id": { "type": "INTEGER" },
                     "title": { "type": "STRING" },
                     "company": { "type": "STRING" },
                     "location": { "type": "STRING" },
                     "description": { "type": "STRING" },
                     "skills": { "type": "ARRAY", "items": { "type": "STRING" } }
                   },
                   "required": ["id", "title", "company", "location", "description", "skills"]
                 }
               }
             },
           }
         }
       };
       
       const apiKey = ""; 
       const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;
       const response = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });

       if (!response.ok) throw new Error(`API error: ${response.statusText}`);
       const result = await response.json();

       if (result.candidates && result.candidates[0]?.content.parts[0]) {
         const parsedJson = JSON.parse(result.candidates[0].content.parts[0].text);
         setJobPostings(parsedJson.jobs || []);
       } else {
         throw new Error("No job postings found.");
       }
    } catch (err) {
      console.error("Error fetching job postings:", err);
      setError("Sorry, we couldn't fetch job postings at the moment. Please try again later.");
      setJobPostings([]);
    } finally {
      setIsLoading(false);
    }
  }, [jobQuery, locationQuery, isRemoteOnly]);
  
  const handleSearchClick = (e) => {
      e.preventDefault();
      fetchJobPostings();
  }

  return (
    <>
      <header className="text-center mb-8">
        <h1 className="text-4xl sm:text-5xl font-bold text-blue-600 mb-2">AI Job Finder</h1>
        <p className="text-lg text-gray-600">Discover your next career opportunity with the power of AI.</p>
      </header>
      <div className="max-w-2xl mx-auto mb-8">
        <form onSubmit={handleSearchClick} className="bg-white p-6 rounded-xl shadow-lg border border-gray-200">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <SearchInput id="job-query" value={jobQuery} onChange={setJobQuery} placeholder="e.g., Software Engineer" label="Job Title / Keywords" Icon={Briefcase} />
            <SearchInput id="location-query" value={locationQuery} onChange={setLocationQuery} placeholder="e.g., New York" label="Location" Icon={MapPin} disabled={isRemoteOnly} />
          </div>
          <div className="mb-4">
              <label htmlFor="remote-only" className="flex items-center cursor-pointer">
                  <input
                      id="remote-only"
                      type="checkbox"
                      checked={isRemoteOnly}
                      onChange={(e) => setIsRemoteOnly(e.target.checked)}
                      className="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span className="ml-2 text-sm text-gray-700">Search for remote-only positions</span>
              </label>
          </div>
          <button type="submit" disabled={isLoading} className="w-full bg-blue-600 text-white font-semibold py-3 px-4 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-4 focus:ring-blue-300 transition-all flex items-center justify-center disabled:bg-blue-300">
            {isLoading ? <><Loader className="animate-spin mr-2 h-5 w-5" />Searching...</> : <><Search className="mr-2 h-5 w-5" />Find Jobs</>}
          </button>
        </form>
      </div>
      <main>
        {error && <ErrorMessage message={error} />}
        {isLoading && <FullScreenLoader message="Finding the best opportunities for you..." />}
        {!isLoading && hasSearched && jobPostings.length === 0 && !error && (
          <div className="text-center py-10 px-4"><h2 className="text-2xl font-semibold">No Jobs Found</h2><p>Try broadening your criteria.</p></div>
        )}
        {!isLoading && jobPostings.length > 0 && (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {jobPostings.map((job) => <JobCard key={job.id} job={job} user={user} />)}
          </div>
        )}
      </main>
    </>
  );
};

const LoginPage = ({ setPage }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  const handleLogin = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setError(null);
    try {
      await signInWithEmailAndPassword(auth, email, password);
      setPage('home');
    } catch (err) {
      setError(err.message);
    } finally {
      setIsLoading(false);
    }
  };

  return <AuthForm type="Login" onSubmit={handleLogin} email={email} setEmail={setEmail} password={password} setPassword={setPassword} error={error} isLoading={isLoading} setPage={setPage} />;
};

const SignupPage = ({ setPage }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  const handleSignup = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setError(null);
    try {
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      const user = userCredential.user;
      // Create a user profile in Firestore
      await setDoc(doc(db, `artifacts/${appId}/users`, user.uid), {
        email: user.email,
        savedJobs: [],
        createdAt: new Date(),
        resume: null // Placeholder for resume
      });
      setPage('home');
    } catch (err) {
      setError(err.message);
    } finally {
      setIsLoading(false);
    }
  };

  return <AuthForm type="Sign Up" onSubmit={handleSignup} email={email} setEmail={setEmail} password={password} setPassword={setPassword} error={error} isLoading={isLoading} setPage={setPage} />;
};

const ProfilePage = ({ user, setUser }) => {
    if (!user || user.isAnonymous) return <div className="text-center p-8">Please log in to view your profile.</div>;

    return (
        <div className="max-w-4xl mx-auto">
            <h2 className="text-3xl font-bold mb-6">Your Profile</h2>
            <div className="bg-white p-6 rounded-xl shadow-lg border border-gray-200 mb-8">
                <h3 className="text-xl font-semibold mb-4">Account Details</h3>
                <p><strong>Email:</strong> {user.email}</p>
                 <div className="mt-4 p-4 bg-gray-100 rounded-lg">
                    <h4 className="font-semibold">My Resume</h4>
                    <p className="text-sm text-gray-600 mt-1">Resume upload feature coming soon! You'll be able to save your resume here for easy applications.</p>
                    <button className="mt-3 bg-gray-300 text-gray-600 font-semibold py-2 px-4 rounded-lg cursor-not-allowed">
                        Upload Resume
                    </button>
                </div>
            </div>
            <div>
                <h3 className="text-xl font-semibold mb-4">Saved Jobs</h3>
                {user.savedJobs && user.savedJobs.length > 0 ? (
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        {user.savedJobs.map((job) => <JobCard key={job.id} job={job} user={user} />)}
                    </div>
                ) : (
                    <p>You haven't saved any jobs yet.</p>
                )}
            </div>
        </div>
    );
};

// --- Reusable UI Components ---

const Navbar = ({ user, setPage }) => {
  const handleLogout = async () => {
    await signOut(auth);
    setPage('home');
  };

  return (
    <nav className="bg-white shadow-md mb-4">
      <div className="container mx-auto px-6 py-3 flex justify-between items-center">
        <a href="#" onClick={(e) => { e.preventDefault(); setPage('home'); }} className="flex items-center text-xl font-bold text-blue-600">
          <Briefcase className="mr-2"/>
          AI Job Finder
        </a>
        <div className="flex items-center space-x-2 sm:space-x-4">
          <button onClick={() => setPage('home')} className="text-gray-600 hover:text-blue-600 p-2 rounded-full transition-colors"><Home /></button>
          {user && !user.isAnonymous ? (
            <>
              <button onClick={() => setPage('profile')} className="text-gray-600 hover:text-blue-600 p-2 rounded-full transition-colors"><User /></button>
              <button onClick={handleLogout} className="flex items-center text-sm font-medium text-gray-600 hover:text-blue-600 transition-colors">
                <LogOut className="mr-1 h-4 w-4"/> Logout
              </button>
            </>
          ) : (
            <>
              <button onClick={() => setPage('login')} className="flex items-center text-sm font-medium text-gray-600 hover:text-blue-600 transition-colors">
                <LogIn className="mr-1 h-4 w-4"/> Login
              </button>
              <button onClick={() => setPage('signup')} className="hidden sm:flex items-center bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-blue-700 transition-all">
                <UserPlus className="mr-2 h-4 w-4"/> Sign Up
              </button>
            </>
          )}
        </div>
      </div>
    </nav>
  );
};

const JobCard = ({ job, user }) => {
  const isSaved = user?.savedJobs?.some(savedJob => savedJob.id === job.id);
  const [isSaving, setIsSaving] = useState(false);

  const handleSaveJob = async () => {
      if (!user || user.isAnonymous) {
          alert("Please log in to save jobs.");
          return;
      }
      setIsSaving(true);
      const userDocRef = doc(db, `artifacts/${appId}/users`, user.uid);
      try {
          if (isSaved) {
              await updateDoc(userDocRef, { savedJobs: arrayRemove(job) });
          } else {
              await updateDoc(userDocRef, { savedJobs: arrayUnion(job) });
          }
          // Note: In a real app, we'd update the user context here to reflect the change immediately
          // For simplicity, we assume a page refresh or navigation will fetch the new state.
      } catch (error) {
          console.error("Error saving job:", error);
      } finally {
          setIsSaving(false);
          alert(isSaved ? 'Job unsaved!' : 'Job saved to your profile!'); // Simple feedback
      }
  };

  return (
    <div className="bg-white rounded-xl shadow-md border border-gray-200 p-6 transition-all hover:shadow-xl hover:-translate-y-1 flex flex-col">
      <div className="flex-grow">
        <div className="flex justify-between items-start">
            <h3 className="text-xl font-bold text-blue-600 mb-1 pr-4">{job.title}</h3>
            {user && !user.isAnonymous && (
              <button onClick={handleSaveJob} disabled={isSaving} className="p-1 rounded-full text-gray-400 hover:text-yellow-500 disabled:cursor-not-allowed">
                  <Star className={`h-6 w-6 transition-colors ${isSaved ? 'text-yellow-400 fill-current' : ''}`} />
              </button>
            )}
        </div>
        <p className="text-md font-semibold text-gray-800 mb-1">{job.company}</p>
        <div className="flex items-center text-gray-500 mb-4"><MapPin className="h-4 w-4 mr-1.5" /><span>{job.location}</span></div>
        <p className="text-gray-600 text-sm mb-4">{job.description}</p>
        <h4 className="font-semibold text-gray-700 mb-2">Key Skills:</h4>
        <div className="flex flex-wrap gap-2">
          {job.skills.map((skill, i) => <span key={i} className="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-1 rounded-full">{skill}</span>)}
        </div>
      </div>
      <div className="mt-6 flex-shrink-0">
        <a href="#" onClick={(e) => e.preventDefault()} className="w-full block text-center bg-gray-800 text-white font-semibold py-2.5 px-4 rounded-lg hover:bg-gray-900 transition-all">View & Apply</a>
      </div>
    </div>
  );
};

const AuthForm = ({ type, onSubmit, email, setEmail, password, setPassword, error, isLoading, setPage }) => (
  <div className="max-w-md mx-auto mt-10">
    <div className="bg-white p-8 rounded-xl shadow-lg border border-gray-200">
      <h2 className="text-2xl font-bold text-center mb-6">{type}</h2>
      <form onSubmit={onSubmit}>
        <div className="mb-4">
          <label className="block text-gray-700">Email</label>
          <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} required className="w-full px-4 py-2 mt-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" />
        </div>
        <div className="mb-6">
          <label className="block text-gray-700">Password</label>
          <input type="password" value={password} onChange={(e) => setPassword(e.target.value)} required className="w-full px-4 py-2 mt-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" />
        </div>
        {error && <p className="text-red-500 text-xs mb-4">{error}</p>}
        <button type="submit" disabled={isLoading} className="w-full bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-blue-700 transition-all flex items-center justify-center disabled:bg-blue-300">
          {isLoading ? <Loader className="animate-spin mr-2"/> : type}
        </button>
      </form>
      <p className="text-center text-sm text-gray-600 mt-4">
        {type === 'Login' ? "Don't have an account? " : "Already have an account? "}
        <a href="#" onClick={(e) => { e.preventDefault(); setPage(type === 'Login' ? 'signup' : 'login'); }} className="text-blue-600 hover:underline font-semibold">
          {type === 'Login' ? 'Sign Up' : 'Login'}
        </a>
      </p>
    </div>
  </div>
);

const SearchInput = ({ id, value, onChange, placeholder, label, Icon, disabled }) => (
    <div>
        <label htmlFor={id} className="block text-sm font-medium text-gray-700 mb-1">{label}</label>
        <div className="relative">
            <Icon className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
            <input id={id} type="text" value={value} onChange={(e) => onChange(e.target.value)} placeholder={placeholder} disabled={disabled} className="w-full pl-10 pr-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 transition-all disabled:bg-gray-100 disabled:cursor-not-allowed"/>
        </div>
    </div>
);

const FullScreenLoader = ({ message }) => (
    <div className="fixed inset-0 bg-gray-50 bg-opacity-75 flex items-center justify-center z-50">
        <div className="text-center">
            <Loader className="animate-spin h-12 w-12 text-blue-600 mx-auto" />
            <p className="mt-4 text-lg text-gray-700">{message}</p>
        </div>
    </div>
);

const ErrorMessage = ({ message }) => (
    <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-lg mb-8 max-w-2xl mx-auto" role="alert">
        <div className="flex">
            <div className="py-1"><ServerCrash className="h-6 w-6 text-red-500 mr-4"/></div>
            <div>
                <p className="font-bold">An Error Occurred</p>
                <p className="text-sm">{message}</p>
            </div>
        </div>
    </div>
);
